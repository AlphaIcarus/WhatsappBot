Looking at the code, we see that every interaction with the bot has three possible inputs:

    - An expected affirmative input, where the answer given by the user is suitable and sets the system to the next step.
    One example of this kind would be to give a correct email when the bot asks you to specify your email.

    - An expected negative input, where the answer given by the suer is suitable but stops the flow of the conversation, and returns to the start.
    One example of this kind would be to reject the petition, given by the bot, of subscribing to the newsletter

    - A non expected input, where the answer given by the user is not suitable, or does not match with the possible expected answers.
    One example of this kind would be to answer a non deterministic sentence (neither yes nor no) when the newsletter is offered.

By that criteria, we now can approach some default conversations with the bot. We assume that the initial state is when the newsletter subscription is offered:

    - Conversations with expected affirmative input: There's only one conversation flow where this happens, and it's

        · confirm newsletter -> valid email given, and thus email stored and subscribed to newsletter -> end

        · give email when ask_for_email -> valid email given and stored -> end

    - Conversations with expected negative input: There are 2 conversation flows where this happens:

        · reject newsletter -> end
        · confirm newsletter -> give wrong email -> end

        · give wrong emil when ask_for_email -> wrong email given, try again -> start again
        - give valid email when ask_for_email -> valid email given and stored -> give email once again -> error -> end 

    - Conversations with non expected input: there are 2 possible conversation flows where this happens (In fact there are 3, but we assume that inserting a 
        wrong email is a negative expected input, and not a non expected input)

        · wrong answer to asking for newsletter-> end?*
        - confirm newsletter -> wrong email format (random input) -> end?*
        
        *We see that, before the experience, we do not know the results before executing this conversation flow (depends entirely on implementation decisions).

After thinking about the execution flow, it is possible for the user to not introduce any input. If that happens, the bot must return to the initial state,
when in a certain moment of time it offers the newsletter subscription to the user, once again.

Also, I do not mind about the "asking_for_card" conversation flow because it returns an automatic hangout. There's no different output depending on different input.